{-# OPTIONS --cubical #-}
{-# OPTIONS --cubical --without-K #-}
open import CubicalBasics.cubical-prelude
open import CubicalBasics.IsomorphismCubical
open import Data.Empty
module CubicalBasics.Integrals where
-- Natural numbers. We use the built in ones to be able to use
-- numerals.

open import Data.Nat.Base  using (‚Ñï; zero; suc; _+_)  renaming (_*_ to _¬∑_ ; _‚â§_ to _‚â§‚Ñï_)

_-_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
n     - zero = n
zero  - suc m = zero
suc n - suc m = n - m

-- {-# BUILTIN NATMINUS _-_ #-}


-- Integers (slightly different from how Dan did them in order to have
-- one less constructor to pattern match on)
data ‚Ñ§ : Type where
  pos    : (n : ‚Ñï) ‚Üí ‚Ñ§
  negsuc : (n : ‚Ñï) ‚Üí ‚Ñ§

suc‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
suc‚Ñ§ (pos n)          = pos (suc n)
suc‚Ñ§ (negsuc zero)    = pos zero
suc‚Ñ§ (negsuc (suc n)) = negsuc n

pred‚Ñ§ : ‚Ñ§ ‚Üí ‚Ñ§
pred‚Ñ§ (pos zero)    = negsuc zero
pred‚Ñ§ (pos (suc n)) = pos n
pred‚Ñ§ (negsuc n)    = negsuc (suc n)

sucPred : ‚àÄ i ‚Üí suc‚Ñ§ (pred‚Ñ§ i) ‚â° i
sucPred (pos zero)    = Œª i ‚Üí pos zero
sucPred (pos (suc n)) = Œª i ‚Üí pos (suc n)
sucPred (negsuc n)    = Œª i ‚Üí negsuc n

predSuc : ‚àÄ i ‚Üí pred‚Ñ§ (suc‚Ñ§ i) ‚â° i
predSuc (pos n)          = Œª i ‚Üí pos n
predSuc (negsuc zero)    = Œª i ‚Üí negsuc zero
predSuc (negsuc (suc n)) = Œª i ‚Üí negsuc (suc n)

sucPath : ‚Ñ§ ‚â° ‚Ñ§
sucPath = ua (suc‚Ñ§ , isoToIsEquiv (iso suc‚Ñ§ pred‚Ñ§ sucPred predSuc))

_+‚Ñ§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
m +‚Ñ§ pos n = m +pos n
  where
  _+pos_ : ‚Ñ§ ‚Üí ‚Ñï  ‚Üí ‚Ñ§
  z +pos 0 = z
  z +pos (suc n) = suc‚Ñ§ (z +pos n)
m +‚Ñ§ negsuc n = m +negsuc n
  where
  _+negsuc_ : ‚Ñ§ ‚Üí ‚Ñï ‚Üí ‚Ñ§
  z +negsuc 0 = pred‚Ñ§ z
  z +negsuc (suc n) = pred‚Ñ§ (z +negsuc n)



+-suc : ‚àÄ m n ‚Üí suc (m + n) ‚â° m + suc n
+-suc zero n i = suc n
+-suc (suc m) n i = suc (+-suc m n i)

+-comm : ‚àÄ m n ‚Üí m + n ‚â° n + m
+-comm zero zero i = 0
+-comm zero (suc n) i = suc (+-comm zero n i)
+-comm (suc m) zero i = suc (+-comm m zero i)
+-comm (suc m) (suc n) i =
  suc (((Œª i ‚Üí  (+-suc m n) (~ i))
  ‚àô (Œª j ‚Üí suc (+-comm m n j))
  ‚àô +-suc n m) i)

+-zero : ‚àÄ m ‚Üí m + 0 ‚â° m
+-zero zero i = zero
+-zero (suc m) i = suc (+-zero m i)

+-assoc : ‚àÄ m n o ‚Üí m + (n + o) ‚â° (m + n) + o
+-assoc zero n o i    = n + o
+-assoc (suc m) n o i = suc (+-assoc m n o i)

addPath : ‚Ñï ‚Üí ‚Ñ§ ‚â° ‚Ñ§
addPath zero = refl
addPath (suc n) = addPath n ‚àô sucPath

predPath : ‚Ñ§ ‚â° ‚Ñ§
predPath = ua (pred‚Ñ§ , isoToIsEquiv (iso pred‚Ñ§ suc‚Ñ§ predSuc sucPred))

subPath : ‚Ñï ‚Üí ‚Ñ§ ‚â° ‚Ñ§
subPath zero = refl
subPath (suc n) = subPath n ‚àô predPath

_+‚Ñ§'_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
m +‚Ñ§' pos n    = transport (addPath n) m
m +‚Ñ§' negsuc n = transport (subPath (suc n)) m

-- This agrees with regular addition defined by pattern-matching
+‚Ñ§'‚â°+‚Ñ§ : _+‚Ñ§'_ ‚â° _+‚Ñ§_
+‚Ñ§'‚â°+‚Ñ§ i m (pos zero) = m
+‚Ñ§'‚â°+‚Ñ§ i m (pos (suc n)) = suc‚Ñ§ (+‚Ñ§'‚â°+‚Ñ§ i m (pos n))
+‚Ñ§'‚â°+‚Ñ§ i m (negsuc zero) = pred‚Ñ§ m
+‚Ñ§'‚â°+‚Ñ§ i m (negsuc (suc n)) = pred‚Ñ§ (+‚Ñ§'‚â°+‚Ñ§ i m (negsuc n))


-- So +‚Ñ§' with a fixed element is an equivalence
isEquivAdd‚Ñ§' : (m : ‚Ñ§) ‚Üí isEquiv (Œª n ‚Üí n +‚Ñ§' m)
isEquivAdd‚Ñ§' (pos n)    = isEquivTransport (addPath n)
isEquivAdd‚Ñ§' (negsuc n) = isEquivTransport (subPath (suc n))

isEquivAdd‚Ñ§ : (m : ‚Ñ§) ‚Üí isEquiv (Œª n ‚Üí n +‚Ñ§ m)
isEquivAdd‚Ñ§ = subst (Œª add ‚Üí (m : ‚Ñ§) ‚Üí isEquiv (Œª n ‚Üí add n m)) +‚Ñ§'‚â°+‚Ñ§ isEquivAdd‚Ñ§'

_‚â§_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí Type
pos n ‚â§ pos n‚ÇÅ = n ‚â§‚Ñï n‚ÇÅ 
pos n ‚â§ negsuc n‚ÇÅ = ùüè
negsuc n ‚â§ pos n‚ÇÅ = ‚ä•
negsuc n ‚â§ negsuc n‚ÇÅ = n‚ÇÅ ‚â§‚Ñï n
